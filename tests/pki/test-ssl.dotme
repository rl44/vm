#!/bin/bash
#

# Répertoire temporaire pour stocker les clés
#

KEYBASE=/tmp/keys."$(uuidgen -t)"
mkdir -p "$KEYBASE"

# Création d'identités
#

function check_ca() {

	# Création d'une CA
	#

	check ca 'hostssl-pki ca "$ca_MAIL" "$ca_KEYNAME" "$ca_KEYDIR"' \
		"Création d'une CA"
}

function check_server() {

	local server_name="$1"

	eval local email=\"\$${server_name}_MAIL\"
	eval local keydir=\"\$${server_name}_KEYDIR\"
	eval local keyname=\"\$${server_name}_KEYNAME\"

	# Création d'une clé serveur
	#

	check "${server_name}_privkey" \
		"hostssl-pki server '$email' '$keyname' '$keydir'" \
		"Création d'une clé serveur pour \"$email\""

	# Signature de la clé par la CA
	#

	check "${server_name}_csr" \
		"cp '$keydir/$keyname.csr' '$KEYBASE/ca/'" \
		"Transfert de la demande de clé de \"$email\" vers la CA"

	check "${server_name}_srvsign" \
		"hostssl-pki srvsign '$ca_MAIL' '$keyname' '$ca_KEYDIR'" \
		"Signature de la clé de \"$email\" par la CA"

	# Transfert du certificat signé et du certificat de la CA vers le
	# serveur
	#

	check "${server_name}_crt" \
		"cp '$KEYBASE/ca/ca.crt' '$KEYBASE/ca/$keyname.crt' '$keydir'/" \
		"Transfert des certificats du CA vers \"$email\""

	# Création d'un PEM (contenant certificat + clé privée) pour le serveur
	#

	check "${server_name}_pem" \
		"hostssl-pki pem '$email' '$keyname' '$keydir'" \
		"Création d'un PEM (certificat+clé privée) pour \"$email\""
}

function check_client() {

	local client_name="$1"

	eval local email=\"\$${client_name}_MAIL\"
	eval local keydir=\"\$${client_name}_KEYDIR\"
	eval local keyname=\"\$${client_name}_KEYNAME\"

	# Création d'une clé client
	#

	check "${client_name}_privkey" \
		"hostssl-pki client '$email' '$keyname' '$keydir'" \
		"Création d'une clé client pour \"$email\""

	# Signature de la clé par la CA
	#

	check "${client_name}_csr" \
		"cp '$keydir/$keyname.csr' '$KEYBASE/ca/'" \
		"Transfert de la demande de clé de \"$email\" vers la CA"

	check "${client_name}_sign" \
		"hostssl-pki sign '$ca_MAIL' '$keyname' '$ca_KEYDIR'" \
		"Signature de la clé de \"$email\" par la CA"

	# Transfert du certificat signé et du certificat de la CA vers le
	# client
	#

	check "${client_name}_crt" \
		"cp '$KEYBASE/ca/ca.crt' '$KEYBASE/ca/$keyname.crt' '$keydir'/" \
		"Transfert des certificats du CA vers \"$email\""


	# Création d'un PEM (contenant certificat + clé privée) pour le client
	#

	check "${client_name}_pem" \
		"hostssl-pki pem '$email' '$keyname' '$keydir'" \
		"Création d'un PEM (certificat+clé privée) pour \"$email\""
}

# SSL avec la commande socat
#

function check_socat_server() {

	local test_name="$1"
	local server_name="$2"

	eval local email=\"\$${server_name}_MAIL\"
	eval local keydir=\"\$${server_name}_KEYDIR\"
	eval local keyname=\"\$${server_name}_KEYNAME\"

	check $test_name "'$SOCAT' EXEC:'echo cookie' openssl-listen:4443,reuseaddr,cert='$keydir/$keyname.pem',cafile='$keydir/ca.crt' & ${test_name}_pid=\$!" \
		"Démarrage d'un socat en mode serveur SSL pour \"$email\""
	
	# teste si le serveur a démarré correctement

	check "${test_name}_started" \
		"sleep 1 && lsof -n -i :4443 -s TCP:LISTEN -Fc | grep socat" \
		"Le serveur socat $test_name ($server_name) est démarré correctement"
}

check_socat_client() {

	local test_name="$1"
	local client_name="$2"

	eval local email=\"\$${client_name}_MAIL\"
	eval local keydir=\"\$${client_name}_KEYDIR\"
	eval local keyname=\"\$${client_name}_KEYNAME\"

	check $test_name "'$SOCAT' openssl:localhost:4443,cert='$keydir/$keyname.pem',cafile='$keydir/ca.crt' stdio | grep cookie" \
		"Démarrage d'un socat en mode client SSL pour \"$email\""

}

# Serveur stunnel4
#

function check_stunnel_server_start() {

	local test_name="$1"
	local server_name="$2"

	eval local email=\"\$${server_name}_MAIL\"
	eval local keydir=\"\$${server_name}_KEYDIR\"
	eval local keyname=\"\$${server_name}_KEYNAME\"

	local stunnel_pidfile="/tmp/$server_name.pid"
	local stunnel_conf="/tmp/$server_name.conf"

	cat >"$stunnel_conf" <<EOF
; global options
;;; stunnel4 server config
;;;

cert = $keydir/$keyname.pem
CAfile = $keydir/ca.crt
debug = 7
;foreground = yes
pid = $stunnel_pidfile
;socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
options = ALL
options = NO_SSLv2
verify = 2
[$server_name]
accept = 0.0.0.0:4443
connect = 0.0.0.0:44443
EOF

	local socat_pidfile="/tmp/$server_name-socatbg.pid"

	# WORKAROUND : stunnel4 semble buggé (Ubuntu oneiric (11.10) amd64),
	# avec l'option exec, contournement avec connexion stunnel4->socat
	#

	check "${test_name}_socatbg" \
		"'$SOCAT' TCP4-LISTEN:44443,fork,reuseaddr EXEC:'echo cookie' & echo \$! >'$socat_pidfile'" \
		"Démarrage d'un serveur socat de fond"

	check $test_name \
		"cat '$stunnel_conf' && '$STUNNEL' '$stunnel_conf'" \
		"Démarrage d'un serveur stunnel pour \"$email\""
}

function check_stunnel_server_started() {

	local test_name="$1"
	local server_name="$2"

        check "${test_name}_started" \
		"sleep 1 && lsof -n -i :4443 -s TCP:LISTEN -Fc | grep stunnel" \
		"Le serveur stunnel $test_name ($server_name) est démarré correctement"
}

function check_stunnel_server_stop() {

	local test_name="$1"
	local server_name="$2"

	local stunnel_pidfile="/tmp/$server_name.pid"
	
	check "${test_name}_stop" \
		"${server_name}_pid=\"\$(cat '$stunnel_pidfile')\" && test -n \"\$${server_name}_pid\" && kill \"\$${server_name}_pid\"" \
		"Arrêt du serveur stunnel $test_name ($server_name)"

	local stunnel_conf="/tmp/$server_name.conf"

	check "${test_name}_cleanup" \
		"rm -f '$stunnel_pidfile' '$stunnel_conf'" \
		"Suppression des fichiers temporaires du serveur stunnel $test_name ($server_name)"

	local socat_pidfile="/tmp/$server_name-socatbg.pid"

	# TODO : arrêter le serveur socat proprement...
	#

}

# Nettoyage
#

function cleanup() {

	rm -fr "$KEYBASE"
}

